name: Deploy Pulse to Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: "3.11"
  APP_NAME: pulse-application-layer
  SERVER_HOST: dev.pulse-api.getpulseinsights.ai
  SERVER_USER: ubuntu
  APP_DIR: /home/ubuntu/pulse-application-layer

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🧪 Test app imports and basic functionality
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        run: |
          # Test that the app can import and start
          python -c "from app.main import app; print('✅ App imports successfully')"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: 🔑 Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: 📂 Add server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: 🔄 Update .env file
        run: |
          ssh ${{ env.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            echo "🔧 Updating .env file..."
            cd ${{ env.APP_DIR }}
            
            # Backup existing .env
            cp .env .env.backup.$(date +%Y%m%d_%H%M%S) || true
            
            # Create new .env file
            cat > .env << 'ENVEOF'
          SUPABASE_URL=${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
          ENVEOF
            
            echo "✅ .env file updated successfully"
          EOF

      - name: 🚀 Deploy to server
        run: |
          ssh ${{ env.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            set -e
            
            echo "🚀 Starting deployment for Pulse..."
            
            # Navigate to project directory
            cd ${{ env.APP_DIR }}
            
            # Backup current version
            echo "💾 Creating backup..."
            cp -r . ../pulse-application-layer_backup_$(date +%Y%m%d_%H%M%S) || true
            
            # Pull latest changes
            echo "📥 Pulling latest changes..."
            git fetch origin
            git reset --hard origin/main
            
            # Activate virtual environment
            source venv/bin/activate
            
            # Install/update dependencies
            echo "📦 Installing dependencies..."
            pip install -r requirements.txt
            
            # Test application can import
            echo "🧪 Testing application..."
            python -c "from app.main import app; print('✅ App loads successfully')"
            
            # Restart application
            echo "🔄 Restarting Pulse service..."
            sudo systemctl restart ${{ env.APP_NAME }}
            
            # Wait for application to start
            sleep 10
            
            # Check if service is running
            echo "✅ Checking service status..."
            sudo systemctl is-active ${{ env.APP_NAME }} --quiet && echo "Service is running" || exit 1
            
            echo "🎉 Deployment completed successfully!"
          EOF

      - name: 🧪 Health check
        run: |
          echo "🏥 Running health check..."

          # Wait for app to fully start
          sleep 15

          # Test if the application responds
          for i in {1..30}; do
            if curl -f -s https://${{ env.SERVER_HOST }}/ > /dev/null; then
              echo "✅ Application is responding!"
              break
            fi
            echo "⏳ Waiting for application... ($i/30)"
            sleep 5
          done

          # Test docs endpoint
          curl -f https://${{ env.SERVER_HOST }}/docs || echo "⚠️ Docs endpoint not responding"

      - name: 🗑️ Cleanup old backups
        if: success()
        run: |
          ssh ${{ env.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            # Keep only last 5 backups
            cd /home/ubuntu
            ls -t pulse-application-layer_backup_* 2>/dev/null | tail -n +6 | xargs rm -rf 2>/dev/null || true
            echo "🗑️ Cleanup completed"
          EOF

      - name: ✅ Deployment Success
        if: success()
        run: |
          echo "🎉 Pulse deployment successful!"
          echo "🌐 Application URL: https://${{ env.SERVER_HOST }}"
          echo "📖 API Docs: https://${{ env.SERVER_HOST }}/docs"

      - name: ❌ Deployment Failed
        if: failure()
        run: |
          echo "💥 Pulse deployment failed!"
          echo "📋 Check the logs above for details"

  rollback:
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: deploy

    steps:
      - name: 🔑 Setup SSH for rollback
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: 🔙 Execute rollback
        run: |
          ssh ${{ env.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            echo "🔄 Starting rollback..."
            
            cd /home/ubuntu
            LATEST_BACKUP=$(ls -t pulse-application-layer_backup_* 2>/dev/null | head -n 1)
            
            if [ ! -z "$LATEST_BACKUP" ]; then
              echo "📂 Restoring from backup: $LATEST_BACKUP"
              rm -rf ${{ env.APP_DIR }}
              mv "$LATEST_BACKUP" ${{ env.APP_DIR }}
              cd ${{ env.APP_DIR }}
              
              source venv/bin/activate
              sudo systemctl restart ${{ env.APP_NAME }}
              
              echo "✅ Rollback completed!"
            else
              echo "❌ No backup found for rollback!"
              exit 1
            fi
          EOF